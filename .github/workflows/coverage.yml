name: Code Coverage

on:
  push:
    branches: [main]

jobs:
  coverage:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:latest
        env:
          POSTGRES_DB: flair
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        ports:
          - 5432:5432
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.11

      - name: Install Poetry
        run: |
          curl -sSL https://install.python-poetry.org | python3 -
          echo "$HOME/.poetry/bin" >> $GITHUB_PATH

      - name: Install project dependencies
        run: poetry install

      - name: Set up PostgreSQL client
        run: |
          sudo apt-get update
          sudo apt-get install postgresql-client -y

      - name: Create Table in PostgreSQL
        env:
          PGPASSWORD: postgres
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/flair
        run: |
          psql -U postgres -h localhost -d flair -c "CREATE TABLE IF NOT EXISTS flair (
            jobid TIMESTAMP NOT NULL,
            testtype VARCHAR(255) NOT NULL,
            run INT NOT NULL,
            fcstinit DATE NOT NULL,
            evalstep INT NOT NULL,
            ds DATE NOT NULL,
            yoriginal FLOAT NOT NULL,
            y FLOAT NOT NULL,
            yhat FLOAT,
            yhatlower FLOAT,
            yhatupper FLOAT,
            trend FLOAT,
            trendlower FLOAT,
            trendupper FLOAT,
            additiveterms FLOAT,
            additivetermslower FLOAT,
            additivetermsupper FLOAT,
            multiplicativeterms FLOAT,
            multiplicativetermslower FLOAT,
            multiplicativetermsupper FLOAT,
            yearly FLOAT,
            yearlylower FLOAT,
            yearlyupper FLOAT,
            simdate DATE,
            sim INT,
            error FLOAT,
            mape FLOAT
            );"

      - name: Run tests and coverage
        run: |
          python -m pytest --cov .
      - name: Upload coverage reports to Codecov
        uses: codecov/codecov-action@v3
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
